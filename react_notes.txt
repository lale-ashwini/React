/************************* Method 1 : Render Element using plain javascript*******************************/

//This is js code to render h1 tag over root Div
/*const heading1=document.createElement("h1");
heading1.innerHTML="Hello World";
const rootDiv=document.getElementById("root");
rootDiv.append(heading1);*/

/*************************Method 2 : Render Element using react CDN*******************************/

//This is plain react code for rendering h1 tage over root element to use react need react CDN loberary
/** add this CDN in index.html file
 * <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
 <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
 * **/
/*const heading1=React.createElement("h1",{},"This react's first heading element");
const root=ReactDOM.createRoot(document.getElementById('root'));
root.render(heading1);*/

/************************* Method 3 : Render Element using react pacakge*******************************/

/*To use react without react CDN need to follow following steps
1.install nodejs and  npm(node package manager)
2.then init npm using 'npm init' it will create pacakge.json
3. then install react and react dom using
 npm install --D react  and (--D / --save-dev => used to install package in dev dependenceies)
 npm install --D react-dom 
then node-modules and package.lock.json created. In node-modules folder node and node-dom pacakge stored 
and in pacakge.lock.json files pacakge dependenceies is maintained
4. To use react and react-dom package use the import statement
Note:If we use 'import' keyword in js files then js file becomes module so to call that module 
in jssscript we need to pass type=module parameter
 
import React from "react";
 import ReactDOM from "react-dom/client";

 const heading1=React.createElement("h1",{},"This is first heading element");
 const root=ReactDOM.createRoot(document.getElementById('root'));
 root.render(heading1);
 **************************************************** *
 Parcel: 
    modules execute on server so to push the application on server we need bundler.
    webpack and parcel are the bundlers 
    TO install parcel bunder use the following command
    npm install parcel
    and after installation run it using following command
    npx parcel index.html(entry point of application) => it create local server for application
    parcel-cache and dist folder are created after execution of parcel
    parcel cache is space for parcel and dist folder store the miniefd code of application 
 Features of Parcel:
       

Babel: babel comes as dependecies of parcel
  parcel or bebel can not autmatically remove console.log.There need to be done setup
  first install bebel-transform-remove-console in dev dependenceies using following commnad 
  npm install babel-plugin-transform-remove-console --save-dev
  use this package using .babelrc: this is configuration file for babel

JSX: react.createElement=>object=>HTML DOM
  //react.createElement gives object then object is converted to HTML DOME
  JSX is nothing but react.createElement
  bebel convert the JSX code to the react.createElement at the end of the day JSX is object
  Features of JSX:
        Readability
        Maintability
        No repeatation
JSX take care of xss attck.It doese code sinitization before renderring data

Components:Name of Component should start with Capital letter
 1.Functional Component:New way of writing code: It is js normal function that returnsome piace of react element,JSX,component  itslef
 To render functionalComponent use the recangle tag and wrap in it
 ex root.render(<functionalComponent/>);
Passing componnet into component is called component composition
 2.Class Component:Old way of writing code

*/